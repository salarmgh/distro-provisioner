(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;;; Install use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Appearance
;;; Remove unnecessary components
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-message t)

;;; Display line numbers
(global-linum-mode)

;;; Modeline line and column number
(line-number-mode 1)
(column-number-mode 1)

                                        ;(setq-default cursor-type 'bar)

;;; Disable scroll jumps
(setq scroll-conservatively 100)


;; Syntax helpers
;;; Highlight closing paranteses
                                        ;(show-paren-mode 1)

;;; Auto close pair
(electric-pair-mode 1)


;; Show paran matching
(require 'paren)
(setq show-paren-style 'parenthesis)
(show-paren-mode +1)

;;; Highlight current line
(when window-system (global-hl-line-mode t))

;; Disable tabs
(setq-default indent-tabs-mode nil)

;; Indent size
(setq-default tab-width 4)

;; Emacs options
;;; Disable annoying sounds
(setq ring-bell-function 'ignore)

;;; delete inside selection when typing
(delete-selection-mode 1)

;;; Disable tabs
(setq-default indent-tabs-mode nil)

;; Emacs backup management
;;; Disable Emacs backup
;; make backup to a designated dir, mirroring the full path
(defun my-backup-file-name (fpath)
  "Return a new file path of a given file path.
If the new path's directories does not exist, create them."
  (let* (
         (backupRootDir "~/.emacs.d/backup/")
         (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
         (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
         )
    (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
    backupFilePath
    )
  )

(setq make-backup-file-name-function 'my-backup-file-name)
(setq auto-save-default nil)

;; Ansi-term
(setq explicit-shell-file-name "/usr/bin/tmux")
(define-key global-map (kbd "C-x t") (lambda () (interactive) (term explicit-shell-file-name)))

;; VIM!!!
                                        ; ci" ca"...
(defun seek-backward-to-char (chr)
  "Seek backwards to a character"
  (interactive "cSeek back to char: ")
  (while (not (= (char-after) chr))
    (forward-char -1)))

(setq char-pairs
      '(( ?\" . ?\" )
        ( ?\' . ?\' )
        ( ?\( . ?\) )
        ( ?\[ . ?\] )
        ( ?\{ . ?\} )
        ( ?<  . ?>  )))

(defun get-char-pair (chr)
  (let ((result ()))
    (dolist (x char-pairs)
      (setq start (car x))
      (setq end (cdr x))
      (when (or (= chr start) (= chr end))
        (setq result x)))
    result))

(defun get-start-char (chr)
  (car (get-char-pair chr)))
(defun get-end-char (chr)
  (cdr (get-char-pair chr)))

(defun seek-to-matching-char (start end count)
  (while (> count 0)
    (if (= (following-char) end)
        (setq count (- count 1))
      (if (= (following-char) start)
          (setq count (+ count 1))))
    (forward-char 1)))

(defun seek-backward-to-matching-char (start end count)
  (if (= (following-char) end)
      (forward-char -1))
  (while (> count 0)
    (if (= (following-char) start)
        (setq count (- count 1))
      (if (= (following-char) end)
          (setq count (+ count 1))))
    (if (> count 0)
        (forward-char -1))))

(defun delete-between-pair (char)
  "Delete in between the given pair"
  (interactive "cDelete between char: ")
  (seek-backward-to-matching-char (get-start-char char) (get-end-char char) 1)
  (forward-char 1)
  (setq mark (point))
  (seek-to-matching-char (get-start-char char) (get-end-char char) 1)
  (forward-char -1)
  (kill-region mark (point)))

(defun delete-all-pair (char)
  "Delete in between the given pair and the characters"
  (interactive "cDelete all char: ")
  (seek-backward-to-matching-char (get-start-char char) (get-end-char char) 1)
  (setq mark (point))
  (forward-char 1)
  (seek-to-matching-char (get-start-char char) (get-end-char char) 1)
  (kill-region mark (point)))

(global-set-key (kbd "C-c i") 'delete-between-pair)
(global-set-key (kbd "C-c a") 'delete-all-pair)

;; Yank one line
(global-set-key (kbd "C-c y") "\C-a\C- \C-e\M-w")

;; Delete one line
(global-set-key (kbd "C-c d") 'kill-whole-line)

;; Increment number
(defun increment-number-at-point ()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))
(global-set-key (kbd "C-c +") 'increment-number-at-point)

;; Dot mode
(use-package dot-mode
  :ensure t)
(global-dot-mode t)

;; Aliases
;;; Shortcut for yes or no
(defalias 'yes-or-no-p 'y-or-n-p)

;; Packages
(use-package all-the-icons
  :ensure t)

(use-package neotree
  :ensure t)
(global-set-key (kbd "C-c m") 'make-directory)
(global-set-key (kbd "C-c n") 'neotree-toggle)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
;; NeoTree can be opened (toggled) at projectile project root
(defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))

;; need another one for python stuff, since this gets re-bound
(global-set-key (kbd "C-c C-p") 'neotree-project-dir)

(use-package magit
  :ensure t)

;;; Dockerfile support
(use-package dockerfile-mode
  :ensure t)

;;; docker-compose support
(use-package docker-compose-mode
  :ensure t)

;; Ido
(use-package ido-vertical-mode
  :ensure t)
(setq ido-enable-flex-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere t)
(ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)

;;; Smart search
(use-package swiper
  :ensure t
  :bind ("C-s" . 'swiper))

;;; Undo
(use-package undo-tree
  :ensure t)
(global-undo-tree-mode)
(global-set-key (kbd "C-u") 'undo-tree-undo)
(global-set-key (kbd "C-\\") 'undo-tree-redo)

;;; Projectile
(use-package projectile
  :ensure t)
(use-package ag)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-switch-project)
(define-key projectile-mode-map (kbd "C-c b") 'projectile-switch-to-buffer)
(define-key projectile-mode-map (kbd "C-c f") 'projectile-find-file)
(define-key projectile-mode-map (kbd "C-c w") 'projectile-kill-buffers)
(define-key projectile-mode-map (kbd "C-c r") 'projectile-ag)
(setq projectile-project-search-path '("~/Workspace/"))

;; Languages
(use-package elixir-mode
  :ensure t)

(use-package go-mode
  :ensure t)

(use-package alchemist-mode
  :ensure alchemist
  :hook elixir-mode)

(use-package flycheck-mode
  :hook elixir-mode
  :ensure flycheck
  :config
  (use-package flycheck-credo)
  (flycheck-credo-setup))

(use-package format-all
  :ensure t)
(add-hook 'prog-mode-hook 'format-all-mode)

(use-package nord-theme
  :ensure t)

(use-package dot-mode
  :ensure t)

;; Set default font
(set-face-attribute 'default nil
                    :family "Roboto Mono"
                    :height 140
                    :weight 'normal
                    :width 'normal)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (all-the-icons use-package undo-tree swiper projectile nord-theme neotree magit ido-vertical-mode go-mode format-all flycheck dot-mode dockerfile-mode docker-compose-mode alchemist ag acme-theme))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
